 @RunWith(SpringJUnit4ClassRunner.class)
11 @ContextConfiguration(locations={"../../../../applicationContext.xml","../../../../applicationDatasource.xml"})
12 public class UserServiceTest  {
13     @Resource
14     private IUserService userService;
15     


@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = "classpath:applicationContext.xml")
public class UserDaoTest extends AbstractJUnit4SpringContextTests {
    
    @Resource
    private UserDaoInterface userDao;
    
    @Test
    public void saveTest() {
        
        User user1 = new User();
        user1.setUsername("tom");
        user1.setPassword("123456");
        user1.setNickName("tom");
        user1.setEmail("tom@gmail.com");
        
        User user2 = new User();
        user2.setUsername("admin");
        user2.setPassword("123456");
        user2.setNickName("admin");
        user2.setEmail("admin@admin.com");
        
        User user3 = new User();
        user3.setUsername("feihong");
        user3.setPassword("123456");
        user3.setNickName("phj");
        user3.setEmail("test@gmail.com");
        
        userDao.save(user1);
        userDao.save(user2);
        userDao.save(user3);
    }
}

基于Spring注解的方式测试：
首先需要增加org.springframework.test-3.0.5.RELEASE.jar当然junit4.jar必不可少。 

@SuppressWarnings("deprecation")  
@ContextConfiguration({"classpath:applicationContext.xml","classpath:spring/buyer/applicationContext-service.xml"  
    })  
    @RunWith(SpringJUnit4ClassRunner.class) //SpringJUnit支持，由此引入Spring―Test框架支持。  
    @Transactional //这个非常关键，如果不加入这个注解配置，事务控制就会完全失效  
    //这里的事务关联到配置文件中的事务控制器(transactionManager = "transactionManager")，同时指定自动回滚(defaultRollback = true).  
    //这样做操作的数据库才不会污染数据库！  
      
    @TransactionConfiguration(transactionManager = "transactionManager",defaultRollback = true)  
    //AbstractTransactionalDataSourceSpringContextTests要想构建这一系列的无污染纯绿色事务测试框架就必须找到这个基类！  
    public abstract class AbstractTestCase extends  
        AbstractTransactionalDataSourceSpringContextTests {  
  
} mport org.springframework.beans.factory.annotation.Autowired;  
  
import cn.itcast.bean.QueryResult;  
import cn.itcast.bean.user.Buyer;  
import cn.itcast.service.buyer.BuyerService;  
  
  
/** 
 * @Title: BuyerSpringtest.java 
 * @Package: cn.itcast.junit.test 
 * @Description: TODO(用一句话描述该文件做什么) 
 * @author: 何枫 
 * @date: 2012-6-28 下午10:19:21 
 * @version: V1.0 
 */  
public class BuyerSpringTest extends AbstractTestCase {  
    @Autowired  
    private BuyerService buyerServiceBean;  
      
    @Test  
    public void listTest(){  
        System.out.println(buyerServiceBean.find(Buyer.class, 19L).toString());  
    }  
      
    @Test  
    public void getScrollDataTotal() {  
        QueryResult<Buyer> qr = buyerServiceBean.getScrollData(0, 5);  
        System.out.println("总记录数:"+ qr.getTotalRecord());  
        for ( Buyer buyer : qr.getResultList()) {  
            System.out.println(buyer.getPassword());  
        }  
    }  
	
	<filter><filter-name>pageCacheFilter</filter-name>
      <filter-class>net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter</filter-class>
  <!--<init-param>
      <param-name>varyHeader</param-name>
      <param-value>true</param-value>
      </init-param> -->
</filter>
<filter-mapping>
    <filter-name>pageCacheFilter</filter-name>
    <url-pattern>/s/*</url-pattern>
</filter-mapping>
	
	
	<cache
        name="SimplePageCachingFilter"
        maxElementsInMemory="10000"
        maxElementsOnDisk="10000"
        eternal="false"
        overflowToDisk="true"
        diskSpoolBufferSizeMB="20"
        timeToIdleSeconds="60"
        timeToLiveSeconds="60"
        memoryStoreEvictionPolicy="LFU"/>
		
		
			 <ehcache:annotation-driven />  
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:ehcache.xml" />  
    </bean>  
    <ehcache:config cache-manager="cacheManager"/>
	
}  http://firethemax.iteye.com/blog/1750268


       @TriggersRemove(cacheName="baseCache",removeAll=true)  
public Entity save(Entity entity) throws CrudException {  
    return entity;  
}  
  
@TriggersRemove(cacheName="baseCache",removeAll=true)  
public Entity update(Entity entity) throws CrudException {  
    return entity;  
}  
  
@TriggersRemove(cacheName="baseCache",removeAll=true)  
public void del(Entity entity) throws CrudException {  
        }  
  
@Cacheable(cacheName="baseCache")   @SuppressWarnings("unchecked")  
public List<Entity> findAll() throws SearchException {  
    return list;  
}  